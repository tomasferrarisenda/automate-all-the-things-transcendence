backstage:
  command: ["node", "packages/backend", "--config", "app-config.production.yaml"]

  image:
    registry: "" # This is necessary to override the default value "ghcr.io"
    repository: tferrari92/backstage
    tag: "22" # This value was modified by the backstage build and push pipeline

  extraEnvVars:
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: GITHUB_TOKEN
    - name: AUTH_GITHUB_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_ID
    - name: AUTH_GITHUB_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_SECRET  
    - name: ARGOCD_AUTH_TOKEN
      valueFrom:
        secretKeyRef:
          name: argocd-auth-token
          key: ARGOCD_AUTH_TOKEN
    - name: GRAFANA_TOKEN
      valueFrom:
        secretKeyRef:
          name: grafana-token
          key: GRAFANA_TOKEN

  appConfig:
    catalog:
      rules:
        - allow:
            - Component
            - API
            - Resource
            - System
            - Domain
            - Location
            - User
            - Group
            - Template

      refreshIntervalSeconds: 5 # In seconds. Default is 100

      providers:
        github:

          # Use this if new services are created in their own repositories
          # catalogsProvider:
          #   organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
          #   catalogPath: '/catalog-info.yaml' # string
          #   filters:
          #     branch: 'main' # string
          #     repository: '.*' # Regex
          #   schedule: # same options as in TaskScheduleDefinition
          #     frequency: { minutes: 30 }
          #     timeout: { minutes: 3 }
          # Catalogs
          catalogsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Resources
          resourcesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/helm-charts/infra/crossplane-managed-resources/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            # catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # APIs
          apisProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*api-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Templates
          templatesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/templates/**/*template.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Systems
          systemsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/systems/**/*.yaml' # this will search all folders for files that end in .yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-transcendence' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Groups
          groupsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/groups/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Users
          usersProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/users/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-transcendence' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }


githubToken: AgAZ7kRA3EopwL9phICRbH/GQ/BO8eZ4+C79nrDtlXxpd8TvsdLuOD8hPdCZ+URY1Y6EPrwt0llxF9pB14CI3rriimaBA4eP7MNdPco9nSvx0HII7nMN9hRchMx4+xTnhA5F+Xps37VlesvvGjWeCMTzRxBYmUtr+QsnpZgqVwbC1XCYSD1zMZht6gfV0GUKD5DBmOgGFG/AQ8TMbc708VzlO5FydqLMOOBm1MbmgnYF/5CkVj64tLqjNErfJtTZP17RdxZ542CgtjCp41XYRjiAhPKJEEh7lqr3w4PnwlZZbVr06wDUdqwk6ELquus1oLZohL2brCmMvg/wZURxdd9ylsX0xz8PfulF/fg6m9OPpeTfPBz1Y7bBOuvTuik5sZu5xD3WamPtuCkKmCYSWrgnB5a/UNv67M6y+Vl6OuzY+KSjROryqYi7W+oGPpeGZd6m6bNjm3Nxh4JO1/X2UXAHMnKC3TheehveWWzk1IWNig47uLFnOmUW8nEFXpMeaYE7XY+mvKk8bGNdPybKDQ1i4UspB0Petb7ZOgnf1aQvxr39ArTOxqtjk3Q9fT4rqpw37sgSvRexx+QkNk1cOEid4Fl77q3ExoSB/RPxPSpq/WgAa13fTzDPTnDSn5Pg1P52gF/0eeZG7cKF7UkwTpOwRRm772tuxo6aVBXKhbXjxEcQJk+1KOOZsGmGsJzuPjbsZhj6KbYe/mBIWJm0gOUlLR9fAY1pjlS1K36XbiO4KKEUjaqDjR4T # This value was modified by the sealed-secrets pipeline
githubAuthClientId: AgB5S/txI+ttDWprvErZ/WY4D82zhNLhzbOHU2cBG+cIY0y7fxRMjODlUnaJyKkVglPM+7T+AbbVpJKT6O8mJl3Pq2egNF4b1YRLaxE3lucMds2PLyj3V2QpC6zluAR2JeaDDYf6C1mFv8B+/ri2UGYOdyT6AQAwLr1vZqI3E7i4qQ5Hvzwqp7uOYY5nwrsr0QYqYBwEj5lp0MheOfEHrtk3E8xfVmCrCYx8XbfxgoOoE+bzii1y8ghEB0T6KyqkQqRbKsta5GIijuVe+a6uzd+HPVKHshFoD8CMwZxo3D8uDAUhotpbUB/tnywCpYALOveUs+TseUs8QhpHRUhRaBb4gBJqvxLhrrMUoNSnLs13m5lt540pQVFpG+izk1FJv1wphvtZuYQmw84LbV8RPSaTDjnTcPPszCfFAI8FHRx3+oSCEJv3drMu/L5HXfoYkDMfIxQXIn4lDCiJ7141ZqiPHM7ErqD4BhsJA7FUIc6Jl1MEgI7ktO1rDsHVTlwZY3JBZ+g5zjTIDLVBfGFWD/WYGmGIdXXp9IyugvmsJXw05Knz8gP8oDLh3D3ZzYFyF8g11NeHPVdjHnCYizpmvWZFk0mhzsa8k6s4FxMHD3vU89J9JxKBXYCGlBNIP2lStrFjBhr3TLHr4BoeIysvNgXVbJBPjF47HK1qWNYwOeyFM96D13Ueyh+8JncrO3clP8EfchqTAVM3DQPodhJq0ZU3BLeojw== # This value was modified by the sealed-secrets pipeline
githubAuthClientSecret: AgAnXMLwzSEvyjT5e8AW4zWaFLfk7147Z0sRuCur/cFpRfAqIYSXkGVDmMu6SeiUymdGjfj2Lob6UhpO7PVKN22A4F+7v7S2mNLJxGrkgDKgnnlHurr4d2W26eeQ7pHawwOnKajl7TNmPebGbr3LzHby+6ek7XUxG636szrOkbMz4EFszKxVETeJTcNaIHHnSaCdJSGcMzTLCrOhU43HA2VOnBEYr/rPkiCWbzQKPvsYGPfXVDAZoN+sR4ho0Yneo67Y9dnkZTvyS/xSX54MKchDzh5Bhwrpx0ZkiNxlHys4AiHoM1XbZW1mpu4Vh2JqUNfPzWXtprqPZgbiTnIhtcRKUHnPz+1yFNhXlieym5QP3oua5Uw29FuLGZXPlsi3P+/PznGBD54xZeJiclL09l+cYbO5CHqfJipUwcTprwQ84rTWBNlWRibf9jdmLr8x0CRORur3HKYe8Jk1fK209BnswyheXzPZKlHVUEyOrQx2Mt+9WVzHC+UYHnPuLxar8oKVioWbLY393VEWRMdpLt6A8+mDfdHTQxGyZQunH+ohjJfEsb2PJ8LNQCXUOYDdWkpGR61KmQPTdp5a+oTogyr96Mc9pcGtnOfSHy5u11Cww+Guayor4uJdjNxhZuk0+MM8aI2BqLwRWIaWXhZRLEpF77j7fxnpQMFtZn7O6bdU8JyvBuDXwLivLpkMmUjwGS9chLuSN4T6dMJB/mRwxIBOcdmWmGcqr/twbeoquFqZWWkiSTHwFmSB # This value was modified by the sealed-secrets pipeline

argocdAuthToken: AgB/3y2ejSNYzOWlGE93kH+htS/5r3xLrAauZT4xmCEd6hNoTC/jGeXbHEtioYcPJNQOkXSUmgPef9x28gkIQ472eyvN8Fw5ve9pPIP/27DeWbpmMqmT2KG3KSkex0c+iB9bE94saoPg9qMrXfYMT+h7x59XAuZA/XbuMrusWpcJPwshqSmg1gEAgnl8u8wFJPAy2lpKPPbIQhnlJOpvw8GzgeuxWGlMhVCwTUUjnhU1GPmNOC+IoRtA3i21DRhRI1/LYPvbzierY9xGx0MDqddscSDuM2l6uD2uflzWw4m/hiQ1B3IQuiKL4a2ZVY8tZe2KrwSWMsbndNGmpu3UgPXY+X/O6LRlMB2pNHRL/oKwB0BleMewbh6CCI2qdkaqrCzYjAs6a2x+fvan6BB0BL+aIykmAGvTybQrfz74UOjLBjwFIZ4r6l2c1zNSkRnW0ljLoEhMLzdWFJfzVbCAVA9Kb4aKXZvGjqdlU6pSA6YHyTYMISuRAROG699782jXI2vvXbgWW67ZMny+Hx6zmFs5Z3R6MRoAU/u37A9UiPhP6X9M/vMTChZGWZjKtoh2Mgy7YbyJJTTepU5df+8WP+E13ioWNFFhb+4a9SGt1FO2XueTtwizNPtbyDYig6grBtYhttUH1mJSloayE0/7WOTk3wSfw0i9xCMgWZwjtW/PmyG8EqkgRifz619WLfuPaO+KGgnUTJu9PQc1lYVnH/IVT6bzxZPgIS8N0vzoSkMuHKlNhsqkKaRoL4onXX3L0JAEM2YyZ2rqVcttWHWPSDsIuQKxmFnQS/Q3ridIooaf5X89IpimWmNHuWuA48BTUw+QB1+ZxV4oVR/XkPuUp9poYKpScSmjmfgJA4RZ83dvQE19+FpydGG1IrvRCT8BuAXTSK6X2Dc4x8VW4i7uFw8enqya5tbCvjEJ4dRzfpJBctyGntMMYQD0JqEHfpNDiw6O227nOAP9FRmFkdiEjSH6Qu3wUXA8JYCXTOEXiU5uESkpz/8yECXrc0gxMNYPrOo7EPKnE4Eiq9CMwSk= # This value was modified by the sealed-secrets pipeline
grafanaToken: AgBaTMUzWBx+TeUxZUrkPVL/CUuaJuf+s4ITIHxeGLF2xMP23PGEez72kU8pi1yIb5TGi8KVrG7U93VY7Fn4JNxaoRE65FeasTcpsOwXc03zZxADhGUD7CFG2K7bnUDWa+vmx42cGRN/7g+E695s7PLdzvCVLg1qzxHlM8dObg36k8ejkJ/Q+hcRqOoyA1xiY5WSwdwVRMc2Mgof3GcRirGJI9QLJki0YdADVKcNAdLa3iY783HdK/67jM/zY9RdOIBd7pBzLsGiDSlcjuN9cb6Hgvg68K7a4V8cYj1QIWcZjBfp3jCQ7pZkSG3x0MP9krl7q/ggHPBm9b93t2TwD9yqM6QHYqya3SlgzunxfITCnmTkFjfVs89T/g4sOHxUMCUYQ6ps1JL19OW2d3ZEhJZyGxDwqCQ4j2sL/asuyqiltVfF4tqxbIDah+xhc2s4nEkRuI1OPJpi73b2R7rmPmhp32gtpS6/8tP9/Lbw048qrkegl2rHAZ3ru6IOMIiRkux3B4QKDnQ0dZZJObpDSGY2v3t8pGDNAmHG+ImMlv7+V+Ba35Pq/xBw0h9cP69jcKPowYmbgsCkMwKSuqKnJW1DkiLpXI3wzNHnVOv2Spkyb1RD7O0d1dREXOH0ZlnEzQuldUSWdiLa+Y1iwG6rbMTErFwBLfTHZKyk+EAjOsbvF+yMMXY7m+IyD83uXvd4Lzk= # This value was modified by the sealed-secrets pipeline

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'


postgresql:
  enabled: true
  auth:
    password: "backstage" # I hard-coded a password because for some reason, when updating the backstage with a new image tag, the new backstage pod can't connect to the database:
                          # Backstage pod log: Backend failed to start up Error: Failed to connect to the database to make sure that 'backstage_plugin_catalog' exists, error: password authentication failed for user "bn_backstage"    
                          # Postgres pod log: FATAL:  password authentication failed for user "bn_backstage"

serviceAccount:
  create: true
